//[zone, borb, TLMax, activeZones]
let ascTable =
[[1982438,617,1789151,193287],[2002696,620,1807377,195319],[2021408,623,1824212,197196],[2038693,626,1839763,198930],[2054659,628,1854127,200532],[2069406,631,1878934,190472],[2083028,633,1891189,191839],[2095610,635,1902509,193101],[2107232,637,1912966,194266],[2117968,638,1922624,195344],[2127884,640,1931546,196338],[2137044,641,1939786,197258],[2145505,642,1947398,198107],[2164878,645,1954430,210448],[2182773,648,1970529,212244],[2199302,650,1985401,213901],[2214570,653,1999137,215433],[2228673,655,2011825,216848],[2241700,657,2023545,218155],[2253733,658,2034371,219362],[2264848,660,2044371,220477],[2275114,662,2053608,221506],[2284598,663,2062140,222458],[2293357,664,2070020,223337],[2301448,665,2088858,212590],[2308922,666,2095582,213340],[2315825,667,2101792,214033],[2322201,668,2107529,214672],[2328091,669,2112828,215263],[2333532,670,2117723,215809],[2338557,671,2122244,216313],[2343199,671,2126420,216779],[2347487,672,2130278,217209],[2351447,673,2133841,217606],[2355106,673,2137133,217973],[2358485,674,2140173,218312],[2361606,674,2142981,218625],[2396831,679,2145575,251256],[2429368,684,2174848,254520],[2459422,688,2201887,257535],[2487182,692,2226863,260319],[2512825,695,2249933,262892],[2548049,700,2271242,276807],[2580585,705,2332856,247729],[2610639,709,2359895,250744],[2638399,713,2384870,253529],[2664041,716,2407939,256102],[2687726,719,2429248,258478],[2709603,722,2460470,249133],[2741370,727,2478651,262719],[2770712,730,2505050,265662],[2797815,734,2529434,268381],[2822850,737,2551958,270892],[2845975,740,2572763,273212],[2867335,743,2591980,275355],[2887066,746,2609731,277335],[2905290,748,2626128,279162],[2922124,750,2652831,269293],[2937674,752,2666821,270853],[2984378,758,2679743,304635],[3027518,764,2718555,308963],[3067367,769,2754406,312961],[3115713,775,2787522,328191],[3160370,780,2827699,332671],[3201620,785,2897152,304468],[3239721,790,2931431,308290],[3274915,794,2963095,311820],[3307424,798,2992342,315082],[3349010,803,3030896,318114],[3387422,808,3065456,321966],[3422904,812,3097378,325526],[3455677,816,3126864,328813],[3497499,821,3154100,343399],[3556922,828,3188855,368067],[3611811,834,3249795,362016],[3662511,840,3295409,367102],[3720881,847,3337543,383338],[3774797,853,3397599,377198],[3824598,859,3463197,361401],[3870599,864,3504583,366016],[3924648,870,3542812,381836],[3974572,876,3599266,375306],[4020687,881,3640755,379932],[4063283,885,3679078,384205],[4102629,890,3714477,388152],[4171313,897,3747174,424139],[4234756,904,3815811,418945],[4304897,911,3868534,436363],[4369685,918,3926823,442862],[4429529,924,4013005,416524],[4496365,932,4062738,433627],[4558101,938,4118280,439821],[4615125,944,4181123,434002],[4667798,950,4228512,439286],[4728001,956,4272285,455716],[4783609,961,4322315,461294],[4834974,967,4380085,454889],[4882420,971,4422771,459649],[4926245,976,4462200,464045],[4966726,980,4498620,468106],[5004118,983,4532261,471857],[5038656,987,4574884,463772],[5070559,990,4603586,466973],[5100028,993,4630098,469930],[5127247,995,4654588,472659],[5152390,998,4677208,475182],[5175614,1000,4698103,477511],[5197066,1002,4717403,479663],[5216881,1004,4735230,481651],[5235184,1006,4751697,483487],[5252090,1007,4766907,485183],[5267707,1009,4780957,486750],[5282131,1010,4793934,488197],[5295455,1012,4805921,489534],[5307762,1013,4816994,490768],[5319130,1014,4827222,491908],[5329631,1015,4836669,492962],[5339330,1016,4845395,493935],[5348289,1017,4853455,494834],[5356565,1017,4860901,495664],[5364209,1018,4867778,496431],[5371269,1019,4874130,497139],[5377791,1019,4879998,497793],[5383815,1020,4885418,498397],[5389380,1021,4890424,498956],[5394520,1021,4895049,499471],[5399268,1021,4899320,499948],[5403653,1022,4903266,500387],[5407704,1022,4906910,500794],[5411445,1023,4910276,501169],[5414902,1023,4913386,501516],[5418094,1023,4916258,501836],[5421043,1024,4918911,502132],[5423767,1024,4921361,502406],[5426283,1024,4923625,502658],[5428607,1024,4925716,502891],[5430753,1024,4927647,503106],[5432736,1025,4929431,503305],[5434567,1025,4931079,503488],[5436259,1025,4932601,503658],[5437822,1025,4934007,503815],[5439265,1025,4935305,503960],[5440599,1025,4936505,504094],[5441830,1026,4937613,504217],[5442968,1026,4938636,504332],[5444018,1026,4939582,504436],[5444989,1026,4940455,504534],[5445886,1026,4941261,504625],[5446714,1026,4942006,504708],[5447479,1026,4942695,504784],[5448185,1026,4943330,504855],[5448838,1026,4943917,504921],[5449441,1026,4944460,504981],[5449997,1026,4944961,505036],[5450512,1026,4945424,505088],[5450987,1026,4945851,505136],[5451426,1026,4946246,505180],[5451831,1026,4946610,505221],[5452205,1027,4946947,505258],[5452551,1027,4947258,505293],[5452871,1027,4947546,505325],[5453166,1027,4947811,505355],[5453438,1027,4948057,505381],[5453690,1027,4948283,505407],[5453923,1027,4948492,505431],[5454137,1027,4948686,505451],[5454336,1027,4948864,505472],[5454519,1027,4949029,505490],[5454688,1027,4949181,505507],[5454845,1027,4949322,505523],[5454989,1027,4949452,505537],[5455123,1027,4949572,505551],[5455246,1027,4949683,505563],[5455360,1027,4949785,505575],[5455465,1027,4949880,505585],[5455562,1027,4949968,505594],[5455652,1027,4950049,505603],[5455736,1027,4950123,505613],[5455813,1027,4950193,505620],[5455884,1027,4950257,505627],[5455950,1027,4950316,505634],[5456011,1027,4950371,505640],[5456068,1027,4950422,505646],[5456121,1027,4950470,505651],[5456170,1027,4950514,505656],[5456215,1027,4950555,505660],[5456258,1027,4950594,505664],[5456298,1027,4950629,505669],[5456335,1027,4950663,505672],[5456370,1027,4950694,505676],[5456403,1027,4950724,505679],[5456434,1027,4950752,505682],[5456463,1027,4950778,505685],[5456490,1027,4950802,505688],[5456516,1027,4950826,505690],[5456541,1027,4950848,505693],[5456564,1027,4950868,505696],[5456586,1027,4950888,505698],[5456607,1027,4950907,505700],[5456627,1027,4950925,505702],[5456646,1027,4950942,505704],[5456664,1027,4950958,505706],[5456681,1027,4950974,505707],[5456698,1027,4950989,505709],[5456714,1027,4951003,505711],[5456729,1027,4951017,505712],[5456744,1027,4951030,505714],[5456758,1027,4951043,505715],[5456771,1027,4951055,505716],[5456784,1027,4951067,505717],[5456797,1027,4951078,505719],[5456809,1027,4951089,505720],[5456821,1027,4951100,505721],[5456832,1027,4951110,505722],[5456844,1027,4951120,505724],[5456854,1027,4951130,505724],[5456865,1027,4951139,505726],[5456875,1027,4951148,505727],[5456884,1027,4951157,505727],[5456894,1027,4951166,505728],[5456903,1027,4951174,505729],[5456912,1027,4951182,505730],[5456921,1027,4951190,505731],[5456929,1027,4951197,505732],[5456938,1027,4951205,505733],[5456946,1027,4951212,505734],[5456954,1027,4951219,505735],[5456961,1027,4951226,505735],[5456969,1027,4951233,505736],[5456976,1027,4951240,505736],[5456983,1027,4951246,505737],[5456990,1027,4951252,505738],[5456997,1027,4951259,505738],[5457004,1027,4951265,505739],[5457011,1027,4951271,505740],[5457017,1027,4951276,505741],[5457023,1027,4951282,505741],[5457030,1027,4951288,505742],[5457036,1027,4951293,505743],[5457042,1027,4951298,505744],[5457047,1027,4951304,505743],[5457053,1027,4951309,505744],[5457059,1027,4951314,505745],[5457064,1027,4951319,505745],[5457070,1027,4951324,505746],[5457075,1027,4951328,505747],[5457080,1027,4951333,505747],[5457085,1027,4951338,505747],[5457091,1027,4951342,505749],[5457096,1027,4951347,505749]]; //taken from a modified progression calculator

let endBorb = 1027;
let borb = endBorb;
let strats = [];
let treshold = endBorb;
let treshold2 = endBorb + 1;

//[[borbTarget,...], [time,...], totalTime]
strats[endBorb] = [[], [], 0];

let minBorb = 185;
let zoneToBorb = [];
for (let i=0; i<ascTable.length; i++) {
    let a = ascTable[i];
    if (a[1] > zoneToBorb.length) {
        zoneToBorb[a[1]] = a[0];
    }
}

let borbToZone = [];

function getTime(borb, goal) {
    let zones = 8050 * 168;
    let borbLimit = borb * 5000;
    if (goal < 437) {
        let as = (goal + 1) * goal / 2;
        let zone = ((as + 1000) / 5 - 4) / 0.09691001300805641435878331582652 * 5 + 100;
        zones -= 1e6 - zone;
        if (zone > borbLimit) {
            let x = zone - borbLimit;
            zones += x * x / 10830;
        }
        return [Math.round(zone), zones];
    }
    for (let i=0; i<ascTable.length; i++) {
        let a = ascTable[i];
        let tl = a[2];
        zones += Number(a[3]) + 8000;
        if (a[0] > borbLimit) {
            let x = a[0] - borbLimit;
            zones += x * x / 10830;
        }
        if (tl > borbLimit) {
            zones += tl - borbLimit;
        }
        if (a[1] >= goal) {
            return [Number(a[0]), zones];
        }
    }
    return Infinity;
}

while (borb > minBorb ) {
    borb--;
    let singleTZone = 0;
    let singleT = [[], [], Infinity];
    for (let i=treshold; i<treshold2; i++) {
        let [zone, time] = getTime(borb,i);
        let totalTime = time + strats[i][2];
        if (totalTime < singleT[2]) {
            let strat = strats[i];
            singleT = [
                [i].concat(strat[0]),
                [time].concat(strat[1]),
                totalTime
            ];
            singleTZone = zone;
        }
    }
    if (borb > (treshold - 2)) {
        strats[borb] = singleT;
        borbToZone[borb] = singleTZone;
        continue;
    }
    let doubleTZone = 0;
    let doubleT = [[], [], Infinity];
    for (let j=borb+1; j<treshold; j++) {
        for (let k=treshold; k<treshold2; k++) {
            let [z1, t1] = getTime(borb, j);
            let [z2, t2] = getTime(j, k);
            let time = [t1, t2];
            let totalTime = time[0] + time[1] + strats[k][2];
            if (totalTime < doubleT[2]) {
                let strat = strats[k];
                doubleT = [
                    [j, k].concat(strat[0]),
                    time.concat(strat[1]),
                    totalTime,
                    singleT
                ];
                doubleTZone = [z1, z2];
            }
        }
    }
    if (doubleT[2] < singleT[2]) {
        treshold2 = treshold;
        treshold = borb + 1;
        strats[borb] = doubleT;
        borbToZone[borb] = doubleTZone[0];
    } else {
        strats[borb] = singleT;
        borbToZone[borb] = singleTZone;
    }
}

console.log(JSON.stringify(borbToZone));
